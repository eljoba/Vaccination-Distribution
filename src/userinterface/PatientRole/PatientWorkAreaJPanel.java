/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PatientRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CreateAppointmentWorkRequest;
import Business.WorkQueue.CreateFollowUpWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kvs25
 */
public class PatientWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Organization organization;
    private EcoSystem business;
    private Enterprise enterprise;

    public PatientWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = organization;
        this.business = business;
        this.enterprise = enterprise;
        populateTable();
        jPatientLabel.setText(account.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jChecklistDialog = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea11 = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        btnManageProfile = new javax.swing.JButton();
        btnSetupAppointment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPatientTable = new javax.swing.JTable();
        jPatientLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jChecklistButton = new javax.swing.JButton();

        jChecklistDialog.setBackground(new java.awt.Color(255, 255, 255));
        jChecklistDialog.setBounds(new java.awt.Rectangle(300, 500, 1000, 800));
        jChecklistDialog.setPreferredSize(new java.awt.Dimension(800, 700));
        jChecklistDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel3.setText("Checklist");
        jChecklistDialog.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 270, 50));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(1);
        jTextArea1.setText("Is the child sick?");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea1);

        jChecklistDialog.getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 130, 30));

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(1);
        jTextArea2.setText("Does the child have any allergy?");
        jScrollPane3.setViewportView(jTextArea2);

        jChecklistDialog.getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 230, 40));

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(2);
        jTextArea3.setText("Has the child shown any reaction to vaccination earlier?");
        jScrollPane4.setViewportView(jTextArea3);

        jChecklistDialog.getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 240, 50));

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setLineWrap(true);
        jTextArea4.setRows(2);
        jTextArea4.setText("Does the child have any health problems?");
        jScrollPane5.setViewportView(jTextArea4);

        jChecklistDialog.getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 370, 290, 40));

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(20);
        jTextArea5.setLineWrap(true);
        jTextArea5.setRows(2);
        jTextArea5.setText("Is the child suffering from Immunity problems?");
        jScrollPane6.setViewportView(jTextArea5);

        jChecklistDialog.getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 480, -1, 60));

        jTextArea6.setEditable(false);
        jTextArea6.setColumns(20);
        jTextArea6.setLineWrap(true);
        jTextArea6.setRows(2);
        jTextArea6.setText("Has the child received vaccination in the past one month?");
        jScrollPane7.setViewportView(jTextArea6);

        jChecklistDialog.getContentPane().add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 610, 270, 50));

        jTextArea7.setEditable(false);
        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jTextArea7.setText("As a precaution with moderate or severe acute illness, all vaccines should be\ndelayed until the illness has improved. Mild illnesses (such as otitis media, upper respiratory\ninfections, and diarrhea) are NOT contraindications to vaccination");
        jScrollPane8.setViewportView(jTextArea7);

        jChecklistDialog.getContentPane().add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 80, 510, 70));

        jTextArea8.setEditable(false);
        jTextArea8.setColumns(20);
        jTextArea8.setRows(5);
        jTextArea8.setText(" If a person has anaphylaxis after eating gelatin, do not administer vaccines containing gelatin. People with egg allergy of any severity can receive any recommended\ninfluenza vaccine (i.e., any IIV or RIV) that is otherwise appropriate for the patient’s\nage. ");
        jScrollPane9.setViewportView(jTextArea8);

        jChecklistDialog.getContentPane().add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, 510, 80));

        jTextArea9.setEditable(false);
        jTextArea9.setColumns(20);
        jTextArea9.setRows(5);
        jTextArea9.setText("Precautions to DTaP (not Tdap) include the following: (a) seizure within 3 days of a dose, (b) pale\nor limp episode or collapse within 48 hours of a dose, (c) continuous crying for 3 or more hours\nwithin 48 hours of a dose, and (d) fever of 105°F (40°C) within 48 hours of a previous dose.\nThere are other adverse events that might have occurred following vaccination that constitute\ncontraindications or precautions to future doses. Under normal circumstances, vaccines are\ndeferred when a precaution is present. However, situations may arise when the benefit outweighs\nthe risk");
        jScrollPane10.setViewportView(jTextArea9);

        jChecklistDialog.getContentPane().add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 260, 510, 80));

        jTextArea10.setEditable(false);
        jTextArea10.setColumns(20);
        jTextArea10.setRows(5);
        jTextArea10.setText("The safety of live, attenuated influenza vaccine (LAIV) in children and teens with lung, heart,\nkidney, or metabolic disease (e.g., diabetes), or a blood disorder has not been established. These\nconditions, including asthma in children ages 5 years and older, should be considered precautions\nfor the use of LAIV.");
        jScrollPane11.setViewportView(jTextArea10);

        jChecklistDialog.getContentPane().add(jScrollPane11, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 370, 510, 80));

        jTextArea11.setEditable(false);
        jTextArea11.setColumns(20);
        jTextArea11.setRows(5);
        jTextArea11.setText("Live virus vaccines (e.g., MMR, MMRV, varicella, rotavirus, and LAIV) are usually contraindicated\nin immunocompromised children. However, there are exceptions. For example, MMR is recommended\nfor asymptomatic HIV-infected children who do not have evidence of severe immunosuppression.\nLikewise, varicella vaccine should be considered for HIV-infected children with\nage-specific CD4+ T-lymphocyte percentage at 15% or greater and may be considered for children\nage 8 years and older with CD4+ T-lymphocyte counts of greater than or equal to 200 cells/µL.\nImmunosuppressed children should not receive LAIV.");
        jScrollPane12.setViewportView(jTextArea11);

        jChecklistDialog.getContentPane().add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 480, 510, 90));

        jTextArea12.setEditable(false);
        jTextArea12.setColumns(20);
        jTextArea12.setRows(5);
        jTextArea12.setText("Children who were given either LAIV or an injectable live virus vaccine (e.g., MMR, MMRV, varicella,\nyellow fever) should wait 28 days before receiving another vaccination of this type. Inactivated\nvaccines may be given at the same time or at any spacing interval. ");
        jScrollPane13.setViewportView(jTextArea12);

        jChecklistDialog.getContentPane().add(jScrollPane13, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 610, 510, 90));

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnManageProfile.setText("Manage Profile");
        btnManageProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageProfileActionPerformed(evt);
            }
        });
        add(btnManageProfile, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 380, 169, 41));

        btnSetupAppointment.setText("Set up Appointment");
        btnSetupAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetupAppointmentActionPerformed(evt);
            }
        });
        add(btnSetupAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 380, -1, 41));

        jPatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Doctor", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jPatientTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, 500, 210));

        jPatientLabel.setBackground(new java.awt.Color(255, 255, 255));
        jPatientLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        add(jPatientLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 30, 160, 40));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Patient Work Area");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 310, 40));

        jChecklistButton.setText("Why the Checklist?");
        jChecklistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChecklistButtonActionPerformed(evt);
            }
        });
        add(jChecklistButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 479, -1, 50));
    }// </editor-fold>//GEN-END:initComponents

    private void btnManageProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageProfileActionPerformed
        // TODO add your handling code here:
        ChangePasswordJPanel cpjp = new ChangePasswordJPanel(userProcessContainer, account, organization, business);
        userProcessContainer.add("ChangePasswordJPanel", cpjp);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btnManageProfileActionPerformed

    private void btnSetupAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetupAppointmentActionPerformed
        // TODO add your handling code here:

        int selectedRow = jPatientTable.getSelectedRow();
        int dialogButton = JOptionPane.YES_NO_OPTION;

        boolean flag = false;
        boolean newFlag = false;
        if (selectedRow >= 0) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to create a new appointment with the selected doctor?", "Confirm", dialogButton);
            if (dialogResult == 0) {
                flag = true;

            }
            if (flag) {
                CreateFollowUpWorkRequest request = new CreateFollowUpWorkRequest();

                request.setCawr((CreateAppointmentWorkRequest) jPatientTable.getValueAt(selectedRow, 0));
                if (!request.getCawr().getStatus().equalsIgnoreCase("Completed")) 
                {
                    JOptionPane.showMessageDialog(null, "Request has not been completed yet");
                    
                } 
                else 
                {
                    request.setReceiver(request.getCawr().getReceiver());

                    CreateFollowUpRequestJPanel cfurjp = new CreateFollowUpRequestJPanel(userProcessContainer, account, organization, request, enterprise, business);
                    userProcessContainer.add("CreateFollowUpWorkRequest", cfurjp);

                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                }
                

            }

        } else {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Do you want to create a new appointment?", "Confirm", dialogButton);

            {
                if (dialogResult == 0) {
                    newFlag = true;
                }
                if (newFlag) {
                    if (business.getNetworkList().size() > 0) {

                        RequestAppointmentJPanel rajp = new RequestAppointmentJPanel(userProcessContainer, account, organization, business);
                        userProcessContainer.add("RequestAppointmentJPanel", rajp);

                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    } else {
                        JOptionPane.showMessageDialog(null, "There are no networks present currently");
                    }
                }

            }

        }
    }//GEN-LAST:event_btnSetupAppointmentActionPerformed

    private void jChecklistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChecklistButtonActionPerformed
        // TODO add your handling code here:
        jChecklistDialog.setVisible(true);
    }//GEN-LAST:event_jChecklistButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnManageProfile;
    private javax.swing.JButton btnSetupAppointment;
    private javax.swing.JButton jChecklistButton;
    private javax.swing.JDialog jChecklistDialog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jPatientLabel;
    private javax.swing.JTable jPatientTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea11;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    // End of variables declaration//GEN-END:variables

    public void populateTable() {
        {
            DefaultTableModel model = (DefaultTableModel) jPatientTable.getModel();

            model.setRowCount(0);
            for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
                Object[] row = new Object[3];
                row[0] = request;
                row[1] = request.getReceiver();
                row[2] = request.getStatus();

                model.addRow(row);
            }
        }
    }
}
