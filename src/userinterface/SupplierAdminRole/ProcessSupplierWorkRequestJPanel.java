/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SupplierAdminRole;

import Business.Enterprise.SupplierEnterprise;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.OrderInventory.OrderInventory;
import Business.Organization.Organization;
import Business.Organization.SupplierAdminOrganization;
import Business.UserAccount.UserAccount;
import Business.Vaccination.Vaccination;
import Business.WorkQueue.InventoryAdminWorkRequest;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.SupplierAdminWorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Elena
 */
public class ProcessSupplierWorkRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProcessSupplierWorkRequestJPanel
     */
    JPanel userProcessContainer;
    SupplierAdminWorkRequest request;
    private OrderInventory oi;
    private Map<String, Integer> orderDetails;
    private UserAccount account;
    private SupplierEnterprise supplierEnterprise;

    public ProcessSupplierWorkRequestJPanel(JPanel userProcessContainer, SupplierAdminWorkRequest request,UserAccount account,SupplierEnterprise supplierEnterprise) {
        initComponents();
        this.supplierEnterprise=supplierEnterprise;
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.account=account;
        //this.oi=oi;
        //System.out.print("hospital enterprise"+request.getHospitalEnterprise());
        orderDetails = new HashMap<>();
        constructOrderDetail();
    }

    public void constructOrderDetail() {

        for (OrderItem orderItem : request.getOrder().getOrderList()) {

            if (orderDetails.containsKey(orderItem.getVaccination().getName())) {
                int quantity = orderDetails.get(orderItem.getVaccination().getName());
                orderDetails.put(orderItem.getVaccination().getName(), quantity + orderItem.getQuantity());
            } else {
                orderDetails.put(orderItem.getVaccination().getName(), orderItem.getQuantity());
                
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backJButton = new javax.swing.JButton();
        submitJButton = new javax.swing.JButton();
        resultJTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        submitJButton.setText("Submit Result");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Result");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Process request from Inventory admin");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(jLabel1)
                        .addGap(37, 37, 37)
                        .addComponent(resultJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backJButton)
                                .addGap(31, 31, 31)
                                .addComponent(submitJButton)))))
                .addContainerGap(204, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(resultJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(submitJButton))
                .addContainerGap(263, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SupplierWorkAreaJPanel dwjp = (SupplierWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        request.setTestResult(resultJTextField.getText());
        
        if(request.getTestResult().equalsIgnoreCase("Approved"))
        {
        request.setStatus("Completed");

        int i = 0;
        
        
        for (Vaccination v : request.getHospitalEnterprise().getOrderInventory().getVaccinationList()) {

            if (orderDetails.get(v.getName()) != null) {
                v.setAvailability(v.getAvailability() + orderDetails.get(v.getName()));
                orderDetails.put(v.getName(),null);
            }

        }
        
        

        
        for(OrderItem oi: request.getOrder().getOrderList()){
            
            String name = oi.getVaccination().getName();
            
            if(orderDetails.get(name) != null){
                
                request.getHospitalEnterprise().getOrderInventory().getVaccinationList().add(oi.getVaccination());
            }
        }
        
        InventoryAdminWorkRequest orderRequest = new InventoryAdminWorkRequest();
        //request.setMessage(message);
        orderRequest.setSender(account);
        orderRequest.setStatus("Order added");
        //orderRequest.setOrder(order);
        //request.setOi(oi);
        orderRequest.setOrderStatus("completed");
        orderRequest.setMessage(request.getTestResult());
        //orderRequest.setHospitalEnterprise(hospitalEnterprise);
        

        /*Organization org = null;
        for (Organization organization : supplierEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof SupplierAdminOrganization) {
                org = organization;
                break;
            }
        }*/
        //if (org != null) {
           // org.getWorkQueue().getWorkRequestList().add(orderRequest);
            account.getWorkQueue().getWorkRequestList().add(orderRequest);
            JOptionPane.showMessageDialog(null, "Order approved!", "Info", JOptionPane.INFORMATION_MESSAGE);
       // }
        
        }
        else
        {
            request.setStatus("Pending");
        }
        
        
        

        /*for (OrderItem s : request.getOrder().getOrderList()) {
            for (Vaccination v : request.getOi().getVaccinationList()) {
                if (s.getVaccination().getName().equalsIgnoreCase(v.getName())) {
                    v.setAvailability(v.getAvailability() + s.getQuantity());

                } else {
                    v = new Vaccination();
                    v.setName(s.getVaccination().getName());
                    v.setPrice(s.getSalesPrice());
                    v.setAvailability(s.getQuantity());
                    request.getOi().addVaccination(v);
                }
            }
        }*/
    }//GEN-LAST:event_submitJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField resultJTextField;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
